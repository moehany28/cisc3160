# -*- coding: utf-8 -*-
"""Copy of 1.life-satisfaction hw

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ydfPi9jHO7BTGfyASutEIMjnSKVHVTWM
"""

# To support both python 2 and python 3
from __future__ import division, print_function, unicode_literals

# Common imports
import numpy as np
import os

# to make this notebook's output stable across runs
np.random.seed(42)

# Commented out IPython magic to ensure Python compatibility.
# To plot pretty figures
# %matplotlib inline
import matplotlib as mpl
import matplotlib.pyplot as plt
mpl.rc('axes', labelsize=14)
mpl.rc('xtick', labelsize=12)
mpl.rc('ytick', labelsize=12)

# Where to save the figures
PROJECT_ROOT_DIR = "."
CHAPTER_ID = "fundamentals"

def save_fig(fig_id, tight_layout=True):
    path = os.path.join(PROJECT_ROOT_DIR, "images", CHAPTER_ID, fig_id + ".png")
    print("Saving figure", fig_id)
    if tight_layout:
        plt.tight_layout()
    plt.savefig(path, format='png', dpi=300)

# Ignore useless warnings (see SciPy issue #5998)
import warnings
warnings.filterwarnings(action="ignore", message="^internal gelsd")

# Function to merge OECD life satisfaction data and IMF GDP per capita data
def prepare_country_stats(oecd_bli, gdp_per_capita, predictor, label):
    oecd_bli = oecd_bli[oecd_bli["INEQUALITY"]=="TOT"]
    oecd_bli = oecd_bli.pivot(index="Country", columns="Indicator", values="Value")
    gdp_per_capita.rename(columns={"2015": "GDP per capita"}, inplace=True)
    gdp_per_capita.set_index("Country", inplace=True)
    full_country_stats = pd.merge(left=oecd_bli, right=gdp_per_capita,
                                  left_index=True, right_index=True)
    full_country_stats.sort_values(by="GDP per capita", inplace=True)
    remove_indices = [0, 1, 6, 8, 33, 34, 35]
    keep_indices = list(set(range(36)) - set(remove_indices))
    return full_country_stats[predictor + [label]].iloc[keep_indices]

# Code example
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import sklearn.linear_model
from sklearn.metrics import mean_squared_error, r2_score

oecd_bli_url = "https://raw.githubusercontent.com/cisc3440/datasets/master/OECD_BetterLifeIndex.csv"
gdp_per_capita_url = "https://raw.githubusercontent.com/cisc3440/datasets/master/IMF_GDP_per_capita.xls"

# Load the data
oecd_bli = pd.read_csv(oecd_bli_url, thousands=',')
gdp_per_capita = pd.read_table(gdp_per_capita_url ,thousands=',',delimiter='\t',
                             encoding='latin1', na_values="n/a")

"""Experiment below with adding predictors to the list to improve the model. For example,

```predictor = ["GDP per capita", "Homicide rate" ]```

You can find the indicators in the output of the cell above.
"""

# Prepare the data
label = "Life satisfaction"
predictor = ["GDP per capita" , "Water quality" ]
country_stats = prepare_country_stats(oecd_bli, gdp_per_capita, predictor, label)
print(country_stats.head())
print(len(country_stats))

X = np.c_[country_stats[predictor]]
y = np.c_[country_stats[label]]

# Visualize the data
import sklearn.neighbors
model = sklearn.neighbors.KNeighborsRegressor(n_neighbors=3)
country_stats.plot(kind='scatter', x=predictor[0], y=label)
plt.show()