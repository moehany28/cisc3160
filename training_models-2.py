# -*- coding: utf-8 -*-
"""training models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F2KAjcgB4wLQplKbnnVuYmUBwY6v0AKz
"""

import numpy as np
np.random.seed(42)        # seed the random generator to get the same results as the book
X = 2 * np.random.rand(100, 1)      # 100 random numbers uniformly sampled between 0 and 1 
y = 4 + 3 * X + np.random.randn(100, 1)   # intercept is 4, slope is 3, plus random noise

import matplotlib.pyplot as plt
plt.scatter(X, y)

# compute theta-hat using the normal equation
X_b = np.c_[np.ones((100, 1)), X] # add x_0 = 1 to each instance (include a bias term for the intercept)
theta_best = np.linalg.inv(X_b.T.dot(X_b)).dot(X_b.T).dot(y) # this is just the equation above
print(theta_best)
# remember, data was generated using 4 + 3x + noise

print(X[:10,])
print(X_b[:10,])

# Now we can make predictions using theta_best
# This is a linear regressor trained on the data we generated
X_new = np.array([[0], [2]])
X_new_b = np.c_[np.ones((2, 1)), X_new] 
y_new_predicted = X_new_b.dot(theta_best)
print(y_new_predicted)

# 4.2 + 2.77 * 0 = 4.2
# 4.2 + 2.77 * 2 = 9.75

# plot the model's predictions
plt.plot(X_new, y_new_predicted, "r-")
plt.plot(X, y, "b.")
plt.axis([0, 2, 0, 15])
plt.show()