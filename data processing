package phonebook;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;

class Phonebook {
    public static void main(String[] args) throws FileNotFoundException {
       HashMap<Name, ArrayList<PhoneNumber>> phonebook = new HashMap<>(); // hash map to represent a phone book
       Scanner input=new Scanner(System.in);
       String filename="/Users/moe/Desktop/phonebook.text";
       Scanner scanner=new Scanner(new File(filename));
       read(phonebook,scanner);
       
       System.out.print("lookup, reverse-lookup, quit (l/q)? ");
       
       while(input.hasNext()) {
		String userin=input.next();
		
		if(userin.equals("l")){
			System.out.print("last name? ");
			String lastname=input.next();
			System.out.print("first name? ");
			String firstname=input.next();
                        Name user=new Name(lastname,firstname);
                        System.out.println(phonebook.containsKey(user));
                        System.out.println(firstname+" "+lastname+"'s phone numbers: "+phonebook.get(user));
		  
		  
			}
		
		
		if(userin.equals("q")) {
			System.out.println();
		}
            System.out.print("lookup, reverse-lookup, quit (l/q)? ");
            } 
        }
    
    public static void read(HashMap hm, Scanner scan){
        while(scan.hasNextLine()){
        String line=scan.nextLine();
        Scanner lineScanner=new Scanner(line);
        while(lineScanner.hasNext()){
            String lname=lineScanner.next();
            //System.out.println(lname);
            String fname=lineScanner.next();
            //System.out.println(fname);
            int size=lineScanner.nextInt();
            Name name=new Name(lname,fname);
            ArrayList<PhoneNumber> list=new ArrayList<PhoneNumber>();
            for(int i=0;i<size;i++){
                String type=lineScanner.next();
                String nums=lineScanner.next();
                PhoneNumber num=new PhoneNumber(type,nums);
                list.add(num);
            }
            
            hm.put(name.toString(),list);
            
            }
        }
    }
 } 
        
class Name {
    private final String lastName;
    private final String firstName;
    public Name(String lastName, String firstName) {
        this.lastName = lastName;
        this.firstName = firstName;
    }
   
    @Override
    public String toString(){
        return firstName + " " + lastName;
    }
   
    @Override
    public boolean equals(Object obj) {
        if(!(obj instanceof Name)) return false;
        Name otherName = (Name) obj;
        return otherName.lastName.equalsIgnoreCase(lastName) && otherName.firstName.equalsIgnoreCase(firstName);
    }   
}

class PhoneNumber {
    private final String phoneType;
    private final String countryCode;
    private final String areaCode;
    private final String subscriberNumber;
   
    PhoneNumber(String type, String phoneNumber) {
        phoneType = type; 
        String temp = phoneNumber.replace(")","-");
        temp = temp.replace("(","");
        String[] arr1 = temp.split("-");
        countryCode = arr1[0];
        areaCode = arr1[1];
        subscriberNumber = arr1[2];
    }
   
    @Override
    public String toString() {
        return String.format(phoneType+": "+countryCode+"-"+areaCode+"-"+subscriberNumber);
        
    }
   
    @Override
    public boolean equals(Object obj) {
        if(!(obj instanceof PhoneNumber)) return false;
        PhoneNumber phoneNumber = (PhoneNumber) obj;
        return countryCode == phoneNumber.countryCode && areaCode == phoneNumber.areaCode && subscriberNumber == phoneNumber.subscriberNumber;
    }

    
}
